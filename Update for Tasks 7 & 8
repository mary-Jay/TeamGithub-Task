{
	"info": {
		"_postman_id": "5227dbc4-f7c9-4454-9411-3cf1feb15ecb",
		"name": "Swagger Petstore (Mine)",
		"description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\n\nContact Support:\n Email: apiteam@swagger.io",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18130692"
	},
	"item": [
		{
			"name": "Pet",
			"item": [
				{
					"name": "post",
					"item": [
						{
							"name": "Add a new pet to the store",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonData = JSON.parse (responseBody);\r",
											"\r",
											"pm.environment.set(\"petId\", jsonData.id);\r",
											"pm.environment.set(\"entityS\", jsonData.status);\r",
											"pm.environment.set(\"github\", jsonData.photoUrls);\r",
											"\r",
											"\r",
											"\r",
											"console.log(jsonData.category.name)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name should have OK string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that the id should be 987654322\", function () {\r",
											"    pm.expect(jsonData.id).to.eql(\r",
											"987654322);\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that the entityCN should be mouse\", function () {\r",
											"    pm.expect(jsonData.category.name).to.eql(\"Mouse\");\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that id is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"2\");\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that tag is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(2);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Confirm that status is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"in-store\");\r",
											"})\r",
											"\r",
											"pm.test(\"Confirm that photoUrls is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"https://lh3.googleusercontent.com/ci/AC_FhM-nxcyAftvv-5wpHz2S7a1fOnv2wwZVMcEgwRvUhAl74j1CVdC8EaejO0EDIChHChxj6bpBEQ=s1200\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n{\n        \"id\": 987654322,\n        \"category\": {\n            \"id\": 2,\n            \"name\": \"Mouse\"\n        },\n        \"name\": \"Jerry\",\n        \"photoUrls\": [\n            \"https://lh3.googleusercontent.com/ci/AC_FhM-nxcyAftvv-5wpHz2S7a1fOnv2wwZVMcEgwRvUhAl74j1CVdC8EaejO0EDIChHChxj6bpBEQ=s1200\"\n        ],\n        \"tags\": [\n            {\n                \"id\": 2,\n                \"name\": \"#Mouse\"\n            }\n        ],\n        \"status\": \"in-store\"\n    }\n/*\n{\n    \"id\": 987654321,\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Fish\"\n    },\n    \"name\": \"Nemo\",\n    \"photoUrls\": [\n        \"https://static.wikia.nocookie.net/pixar/images/a/aa/Nemo-FN.png/revision/latest?cb=20160710221104\"\n    ],\n    \"tags\": [\n        {\n            \"id\": 1,\n            \"name\": \"#Nemo\"\n        }\n    ],\n    \"status\": \"in-store\"\n}\n\n{\n        \"id\": 987654322,\n        \"category\": {\n            \"id\": 2,\n            \"name\": \"Mouse\"\n        },\n        \"name\": \"Jerry\",\n        \"photoUrls\": [\n            \"https://lh3.googleusercontent.com/ci/AC_FhM-nxcyAftvv-5wpHz2S7a1fOnv2wwZVMcEgwRvUhAl74j1CVdC8EaejO0EDIChHChxj6bpBEQ=s1200\"\n        ],\n        \"tags\": [\n            {\n                \"id\": 2,\n                \"name\": \"#Mouse\"\n            }\n        ],\n        \"status\": \"in-store\"\n    }\n*/",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"response": [
								{
									"name": "Invalid id(Abcd)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add a new pet to the store (invalid id-Abcd)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*var jsonData = JSON.parse (responseBody);\r",
											"\r",
											"pm.environment.set(\"petId\", jsonData.id);\r",
											"pm.environment.set(\"entityS\", jsonData.status);\r",
											"\r",
											"//console.log(jsonData.category.name)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name should have OK string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that the id should be 987654322\", function () {\r",
											"    pm.expect(jsonData.id).to.eql(\r",
											"987654322);\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that the entityCN should be mouse\", function () {\r",
											"    pm.expect(jsonData.category.name).to.eql(\"Mouse\");\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that id is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"2\");\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that tag is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(2);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Confirm that status is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"in-store\");\r",
											"})\r",
											"\r",
											"pm.test(\"Confirm that photoUrls is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"https://lh3.googleusercontent.com/ci/AC_FhM-nxcyAftvv-5wpHz2S7a1fOnv2wwZVMcEgwRvUhAl74j1CVdC8EaejO0EDIChHChxj6bpBEQ=s1200\");\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"id\": abcd,\n        \"category\": {\n            \"id\": 2,\n            \"name\": \"Mouse\"\n        },\n        \"name\": \"Jerry\",\n        \"photoUrls\": [\n            \"https://lh3.googleusercontent.com/ci/AC_FhM-nxcyAftvv-5wpHz2S7a1fOnv2wwZVMcEgwRvUhAl74j1CVdC8EaejO0EDIChHChxj6bpBEQ=s1200\"\n        ],\n        \"tags\": [\n            {\n                \"id\": 2,\n                \"name\": \"#Mouse\"\n            }\n        ],\n        \"status\": \"in-store\"\n    }\n    ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "put",
					"item": [
						{
							"name": "Update an existing pet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse (responseBody);\r",
											"\r",
											"pm.environment.set(\"petId\", jsonData.id);\r",
											"pm.environment.set(\"entitytag\", jsonData.tags[0].id);\r",
											"pm.environment.set(\"entityS\", jsonData.status);\r",
											"\r",
											"//console.log(jsonData.category.name)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name should have OK string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that the id should be 987654321\", function () {\r",
											"    pm.expect(jsonData.id).to.eql(\r",
											"987654321);\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that the entityCN should be Fish\", function () {\r",
											"    pm.expect(jsonData.category.name).to.eql(\"Fish\");\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that id is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that tag is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(1);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Confirm that status is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"in-store\");\r",
											"})\r",
											"\r",
											"pm.test(\"Confirm that photoUrls is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"https://static.wikia.nocookie.net/pixar/images/a/aa/Nemo-FN.png/revision/latest?cb=20160710221104\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 987654321,\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Fish\"\n    },\n    \"name\": \"Nemo\",\n    \"photoUrls\": [\n        \"https://static.wikia.nocookie.net/pixar/images/a/aa/Nemo-FN.png/revision/latest?cb=20160710221104\"\n    ],\n    \"tags\": [\n        {\n            \"id\": 1,\n            \"name\": \"#Nemo\"\n        }\n    ],\n    \"status\": \"in-store\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"response": [
								{
									"name": "Invalid ID supplied",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Pet not found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation exception",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Invalid id supplied",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse (responseBody);\r",
											"\r",
											"pm.environment.set(\"petId\", jsonData.id);\r",
											"pm.environment.set(\"entitytag\", jsonData.tags[0].id);\r",
											"pm.environment.set(\"entityS\", jsonData.status);\r",
											"\r",
											"//console.log(jsonData.category.name)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name should have OK string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that the id should be 987654321\", function () {\r",
											"    pm.expect(jsonData.id).to.eql(\r",
											"987654321);\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that the entityCN should be Fish\", function () {\r",
											"    pm.expect(jsonData.category.name).to.eql(\"Fish\");\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that id is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that tag is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(1);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Confirm that status is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"in-store\");\r",
											"})\r",
											"\r",
											"pm.test(\"Confirm that photoUrls is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"https://static.wikia.nocookie.net/pixar/images/a/aa/Nemo-FN.png/revision/latest?cb=20160710221104\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 987654321,\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Fish\"\n    },\n    \"name\": \"Nemo\",\n    \"photoUrls\": [\n        \"https://static.wikia.nocookie.net/pixar/images/a/aa/Nemo-FN.png/revision/latest?cb=20160710221104\"\n    ],\n    \"tags\": [\n        {\n            \"id\": 1,\n            \"name\": \"#Nemo\"\n        }\n    ],\n    \"status\": \"in-store\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Pet not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse (responseBody);\r",
											"\r",
											"pm.environment.set(\"petId\", jsonData.id);\r",
											"pm.environment.set(\"entitytag\", jsonData.tags[0].id);\r",
											"pm.environment.set(\"entityS\", jsonData.status);\r",
											"\r",
											"//console.log(jsonData.category.name)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name should have OK string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that the id should be 987654321\", function () {\r",
											"    pm.expect(jsonData.id).to.eql(\r",
											"987654321);\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that the entityCN should be Fish\", function () {\r",
											"    pm.expect(jsonData.category.name).to.eql(\"Fish\");\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that id is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that tag is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(1);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Confirm that status is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"in-store\");\r",
											"})\r",
											"\r",
											"pm.test(\"Confirm that photoUrls is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"https://static.wikia.nocookie.net/pixar/images/a/aa/Nemo-FN.png/revision/latest?cb=20160710221104\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 987654321,\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Fish\"\n    },\n    \"name\": \"Nemo\",\n    \"photoUrls\": [\n        \"https://static.wikia.nocookie.net/pixar/images/a/aa/Nemo-FN.png/revision/latest?cb=20160710221104\"\n    ],\n    \"tags\": [\n        {\n            \"id\": 1,\n            \"name\": \"#Nemo\"\n        }\n    ],\n    \"status\": \"in-store\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valiation error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse (responseBody);\r",
											"\r",
											"pm.environment.set(\"petId\", jsonData.id);\r",
											"pm.environment.set(\"entitytag\", jsonData.tags[0].id);\r",
											"pm.environment.set(\"entityS\", jsonData.status);\r",
											"\r",
											"//console.log(jsonData.category.name)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name should have OK string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that the id should be 987654321\", function () {\r",
											"    pm.expect(jsonData.id).to.eql(\r",
											"987654321);\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that the entityCN should be Fish\", function () {\r",
											"    pm.expect(jsonData.category.name).to.eql(\"Fish\");\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that id is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Confirm that tag is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(1);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Confirm that status is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"in-store\");\r",
											"})\r",
											"\r",
											"pm.test(\"Confirm that photoUrls is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"https://static.wikia.nocookie.net/pixar/images/a/aa/Nemo-FN.png/revision/latest?cb=20160710221104\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 987654321,\n    \"category\": {\n        \"id\": 1,\n        \"name\": \"Fish\"\n    },\n    \"name\": \"Nemo\",\n    \"photoUrls\": [\n        \"https://static.wikia.nocookie.net/pixar/images/a/aa/Nemo-FN.png/revision/latest?cb=20160710221104\"\n    ],\n    \"tags\": [\n        {\n            \"id\": 1,\n            \"name\": \"#Nemo\"\n        }\n    ],\n    \"status\": \"in-store\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete",
					"item": [
						{
							"name": "Deletes a pet",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "api_key",
										"value": "elit culpa sunt deserunt"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/300000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"300000"
									]
								}
							},
							"response": [
								{
									"name": "Invalid ID supplied",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											},
											{
												"key": "api_key",
												"value": "elit culpa sunt deserunt"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/:petId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												":petId"
											],
											"variable": [
												{
													"key": "petId",
													"value": "-15171659",
													"description": "(Required) Pet id to delete"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Pet not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											},
											{
												"key": "api_key",
												"value": "elit culpa sunt deserunt"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/:petId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												":petId"
											],
											"variable": [
												{
													"key": "petId",
													"value": "-15171659",
													"description": "(Required) Pet id to delete"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Deletes a pet (invalid id)",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "api_key",
										"value": "elit culpa sunt deserunt"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/300000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"300000"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletes a pet (pet not found)",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "api_key",
										"value": "elit culpa sunt deserunt"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/9223372036854019000?petid=3000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"9223372036854019000"
									],
									"query": [
										{
											"key": "petid",
											"value": "3000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Updates a pet in the store with form data",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "entityCN",
									"value": "Mouse",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pet/{{petId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{petId}}"
							]
						}
					},
					"response": [
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "ea consequat cillum",
											"description": "Updated name of the pet"
										},
										{
											"key": "status",
											"value": "qui",
											"description": "Updated status of the pet"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "-15171659",
											"description": "(Required) ID of pet that needs to be updated"
										}
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "uploads an image",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "additionalMetadata",
									"value": "et sunt pariatur proident",
									"description": "Additional data to pass to server",
									"type": "text"
								},
								{
									"key": "file",
									"description": "file to upload",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pet/:petId/uploadImage",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId",
								"uploadImage"
							],
							"variable": [
								{
									"key": "petId",
									"value": "-15171659",
									"description": "(Required) ID of pet to update"
								}
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "additionalMetadata",
											"value": "et sunt pariatur proident",
											"description": "Additional data to pass to server",
											"type": "text"
										},
										{
											"key": "file",
											"description": "file to upload",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pet/:petId/uploadImage",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId",
										"uploadImage"
									],
									"variable": [
										{
											"key": "petId",
											"value": "-15171659",
											"description": "(Required) ID of pet to update"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": -68684623,\n  \"type\": \"sunt eu labore Ut\",\n  \"message\": \"commodo cupidatat\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "{pet Id}",
			"item": [
				{
					"name": "Find pet by ID (valid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"var jsonData = JSON.parse (responseBody);\r",
									"\r",
									"console.log(jsonData.id)\r",
									"console.log(jsonData.category.name)\r",
									"console.log(jsonData.name)\r",
									"console.log(jsonData.tags [0].id)\r",
									"console.log(jsonData.tags [0].name)\r",
									"console.log(jsonData.status)\r",
									"console.log(jsonData.photoUrls)\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Confirm that the id should be 9876522\", function () {\r",
									"    pm.expect(jsonData.id).to.eql(\r",
									"987654322);\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the entityCN should be Mouse\", function () {\r",
									"    pm.expect(jsonData.category.name).to.eql(\"Mouse\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that id is present\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that tag is present\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(2);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Confirm that status is present\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"in-store\");\r",
									"})\r",
									"\r",
									"pm.test(\"Confirm that photoUrls is present\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://lh3.googleusercontent.com/ci/AC_FhM-nxcyAftvv-5wpHz2S7a1fOnv2wwZVMcEgwRvUhAl74j1CVdC8EaejO0EDIChHChxj6bpBEQ=s1200\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//pm.environment.set(\"entityStatus\", jsonData.status);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/{{petId}}?id={{petId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{petId}}"
							],
							"query": [
								{
									"key": "id",
									"value": "{{petId}}"
								}
							]
						},
						"description": "Returns a single pet"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "-15171659",
											"description": "(Required) ID of pet to return"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"Excepteur laborum ex elit\",\n    \"ad minim veniam Lorem in\"\n  ],\n  \"id\": 38923933,\n  \"category\": {\n    \"id\": 67250630,\n    \"name\": \"sint ve\"\n  },\n  \"tags\": [\n    {\n      \"id\": 72443835,\n      \"name\": \"tempor i\"\n    },\n    {\n      \"id\": 9738203,\n      \"name\": \"reprehenderit incididunt sit quis\"\n    }\n  ],\n  \"status\": \"available\"\n}"
						},
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "-15171659",
											"description": "(Required) ID of pet to return"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Pet not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "-15171659",
											"description": "(Required) ID of pet to return"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Find pet by ID (invalid id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"/*pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"var jsonData = JSON.parse (responseBody);\r",
									"\r",
									"console.log(jsonData.id)\r",
									"console.log(jsonData.category.name)\r",
									"console.log(jsonData.name)\r",
									"console.log(jsonData.tags [0].id)\r",
									"console.log(jsonData.tags [0].name)\r",
									"console.log(jsonData.status)\r",
									"console.log(jsonData.photoUrls)\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Confirm that the id should be 9876522\", function () {\r",
									"    pm.expect(jsonData.id).to.eql(\r",
									"987654322);\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the entityCN should be Mouse\", function () {\r",
									"    pm.expect(jsonData.category.name).to.eql(\"Mouse\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that id is present\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that tag is present\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(2);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Confirm that status is present\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"in-store\");\r",
									"})\r",
									"\r",
									"pm.test(\"Confirm that photoUrls is present\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://lh3.googleusercontent.com/ci/AC_FhM-nxcyAftvv-5wpHz2S7a1fOnv2wwZVMcEgwRvUhAl74j1CVdC8EaejO0EDIChHChxj6bpBEQ=s1200\");\r",
									"});\r",
									"\r",
									"\r",
									"*/\r",
									"\r",
									"//pm.environment.set(\"entityStatus\", jsonData.status);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/abcd",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"abcd"
							]
						},
						"description": "Returns a single pet"
					},
					"response": []
				},
				{
					"name": "Find pet by ID (pet not found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"var jsonData = JSON.parse (responseBody);\r",
									"\r",
									"console.log(jsonData.id)\r",
									"console.log(jsonData.category.name)\r",
									"console.log(jsonData.name)\r",
									"console.log(jsonData.tags [0].id)\r",
									"console.log(jsonData.tags [0].name)\r",
									"console.log(jsonData.status)\r",
									"console.log(jsonData.photoUrls)\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Confirm that the id should be 9876522\", function () {\r",
									"    pm.expect(jsonData.id).to.eql(\r",
									"987654322);\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the entityCN should be Mouse\", function () {\r",
									"    pm.expect(jsonData.category.name).to.eql(\"Mouse\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that id is present\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that tag is present\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(2);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Confirm that status is present\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"in-store\");\r",
									"})\r",
									"\r",
									"pm.test(\"Confirm that photoUrls is present\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://lh3.googleusercontent.com/ci/AC_FhM-nxcyAftvv-5wpHz2S7a1fOnv2wwZVMcEgwRvUhAl74j1CVdC8EaejO0EDIChHChxj6bpBEQ=s1200\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//pm.environment.set(\"entityStatus\", jsonData.status);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/300000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"300000"
							]
						},
						"description": "Returns a single pet"
					},
					"response": []
				}
			]
		},
		{
			"name": "status",
			"item": [
				{
					"name": "Finds Pets by status (valid)",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/findByStatus?status=in-store",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "available",
									"description": "(Required) Status values that need to be considered for filter",
									"disabled": true
								},
								{
									"key": "status",
									"value": "in-store"
								}
							]
						},
						"description": "Multiple status values can be provided with comma separated strings"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=available&status=available",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available"
										},
										{
											"key": "status",
											"value": "available"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"Lorem ea\",\n      \"magna occaecat\"\n    ],\n    \"id\": 99588290,\n    \"category\": {\n      \"id\": -89815812,\n      \"name\": \"eu mollit sit\"\n    },\n    \"tags\": [\n      {\n        \"id\": -16690296,\n        \"name\": \"dolor ullamco veniam ex\"\n      },\n      {\n        \"id\": -95263389,\n        \"name\": \"amet dolor enim\"\n      }\n    ],\n    \"status\": \"sold\"\n  },\n  {\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"minim labore occaecat ex\",\n      \"Lorem incididunt nostrud\"\n    ],\n    \"id\": 52356183,\n    \"category\": {\n      \"id\": 82413072,\n      \"name\": \"ut\"\n    },\n    \"tags\": [\n      {\n        \"id\": -30566869,\n        \"name\": \"quis Excepteur occaecat\"\n      },\n      {\n        \"id\": 34838763,\n        \"name\": \"Duis do\"\n      }\n    ],\n    \"status\": \"pending\"\n  }\n]"
						},
						{
							"name": "Invalid status value",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=available&status=available",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available"
										},
										{
											"key": "status",
											"value": "available"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Finds Pets by status (invalid status value)",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/findByStatus?status=offshore",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "offshore"
								}
							]
						},
						"description": "Multiple status values can be provided with comma separated strings"
					},
					"response": []
				}
			]
		},
		{
			"name": "tag",
			"item": [
				{
					"name": "Finds Pets by tags",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/findByTags?tags=%23Nemo",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByTags"
							],
							"query": [
								{
									"key": "tags",
									"value": "#Nemo"
								}
							]
						},
						"description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/findByTags?tags=nostrud consectetur elit nulla&tags=adipisicing ullamco",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByTags"
									],
									"query": [
										{
											"key": "tags",
											"value": "nostrud consectetur elit nulla"
										},
										{
											"key": "tags",
											"value": "adipisicing ullamco"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"Lorem ea\",\n      \"magna occaecat\"\n    ],\n    \"id\": 99588290,\n    \"category\": {\n      \"id\": -89815812,\n      \"name\": \"eu mollit sit\"\n    },\n    \"tags\": [\n      {\n        \"id\": -16690296,\n        \"name\": \"dolor ullamco veniam ex\"\n      },\n      {\n        \"id\": -95263389,\n        \"name\": \"amet dolor enim\"\n      }\n    ],\n    \"status\": \"sold\"\n  },\n  {\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"minim labore occaecat ex\",\n      \"Lorem incididunt nostrud\"\n    ],\n    \"id\": 52356183,\n    \"category\": {\n      \"id\": 82413072,\n      \"name\": \"ut\"\n    },\n    \"tags\": [\n      {\n        \"id\": -30566869,\n        \"name\": \"quis Excepteur occaecat\"\n      },\n      {\n        \"id\": 34838763,\n        \"name\": \"Duis do\"\n      }\n    ],\n    \"status\": \"pending\"\n  }\n]"
						},
						{
							"name": "Invalid tag value",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/findByTags?tags=nostrud consectetur elit nulla&tags=adipisicing ullamco",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByTags"
									],
									"query": [
										{
											"key": "tags",
											"value": "nostrud consectetur elit nulla"
										},
										{
											"key": "tags",
											"value": "adipisicing ullamco"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Finds Pets by tags (invalid tag)",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/findByTags?tags=%23menu",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByTags"
							],
							"query": [
								{
									"key": "tags",
									"value": "%23menu"
								}
							]
						},
						"description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."
					},
					"response": []
				}
			]
		},
		{
			"name": "Store",
			"item": [
				{
					"name": "order",
					"item": [
						{
							"name": "Place an order for a pet",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 68801032,\n  \"petId\": 8298035,\n  \"quantity\": 24094190,\n  \"shipDate\": \"1971-04-08T14:56:24.112Z\",\n  \"status\": \"placed\",\n  \"complete\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": 68801032,\n  \"petId\": 8298035,\n  \"quantity\": 24094190,\n  \"shipDate\": \"1971-04-08T14:56:24.112Z\",\n  \"status\": \"placed\",\n  \"complete\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/store/order",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": 68801032,\n  \"petId\": 8298035,\n  \"quantity\": 24094190,\n  \"shipDate\": \"1971-04-08T14:56:24.112Z\",\n  \"status\": \"placed\",\n  \"complete\": false\n}"
								},
								{
									"name": "Invalid Order",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": 68801032,\n  \"petId\": 8298035,\n  \"quantity\": 24094190,\n  \"shipDate\": \"1971-04-08T14:56:24.112Z\",\n  \"status\": \"placed\",\n  \"complete\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/store/order",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Returns pet inventories by status",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/store/inventory",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"inventory"
							]
						},
						"description": "Returns a map of status codes to quantities"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/store/inventory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"inventory"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"qui_f5\": 21187434,\n  \"adipisicing_84\": -98681962,\n  \"ullamco_6a\": -2349165,\n  \"cupidatat2\": 28061251\n}"
						}
					]
				}
			]
		},
		{
			"name": "{order Id}",
			"item": [
				{
					"name": "Find purchase order by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "5",
									"description": "(Required) ID of pet that needs to be fetched"
								}
							]
						},
						"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "5",
											"description": "(Required) ID of pet that needs to be fetched"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 68801032,\n  \"petId\": 8298035,\n  \"quantity\": 24094190,\n  \"shipDate\": \"1971-04-08T14:56:24.112Z\",\n  \"status\": \"placed\",\n  \"complete\": false\n}"
						},
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "5",
											"description": "(Required) ID of pet that needs to be fetched"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Order not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "5",
											"description": "(Required) ID of pet that needs to be fetched"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete purchase order by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "32369284",
									"description": "(Required) ID of the order that needs to be deleted"
								}
							]
						},
						"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
					},
					"response": [
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "32369284",
											"description": "(Required) ID of the order that needs to be deleted"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Order not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "32369284",
											"description": "(Required) ID of the order that needs to be deleted"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "{username}",
					"item": [
						{
							"name": "Get user by user name",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/:username?username=user1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"query": [
										{
											"key": "username",
											"value": "user1"
										}
									],
									"variable": [
										{
											"key": "username",
											"value": "elit culpa sunt deserunt",
											"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
										}
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "elit culpa sunt deserunt",
													"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": -27651358,\n  \"username\": \"ea occae\",\n  \"firstName\": \"aliquip proident Lorem laboris\",\n  \"lastName\": \"commodo proident et esse ullamco\",\n  \"email\": \"proident do veniam\",\n  \"password\": \"ut irure reprehenderit consequat U\",\n  \"phone\": \"enim laboris nisi do\",\n  \"userStatus\": 95919992\n}"
								},
								{
									"name": "Invalid username supplied",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "elit culpa sunt deserunt",
													"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "User not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "elit culpa sunt deserunt",
													"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Updated user",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": -27651358,\n  \"username\": \"ea occae\",\n  \"firstName\": \"aliquip proident Lorem laboris\",\n  \"lastName\": \"commodo proident et esse ullamco\",\n  \"email\": \"proident do veniam\",\n  \"password\": \"ut irure reprehenderit consequat U\",\n  \"phone\": \"enim laboris nisi do\",\n  \"userStatus\": 95919992\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "elit culpa sunt deserunt",
											"description": "(Required) name that need to be updated"
										}
									]
								},
								"description": "This can only be done by the logged in user."
							},
							"response": [
								{
									"name": "Invalid user supplied",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": -27651358,\n  \"username\": \"ea occae\",\n  \"firstName\": \"aliquip proident Lorem laboris\",\n  \"lastName\": \"commodo proident et esse ullamco\",\n  \"email\": \"proident do veniam\",\n  \"password\": \"ut irure reprehenderit consequat U\",\n  \"phone\": \"enim laboris nisi do\",\n  \"userStatus\": 95919992\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "elit culpa sunt deserunt",
													"description": "(Required) name that need to be updated"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "User not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": -27651358,\n  \"username\": \"ea occae\",\n  \"firstName\": \"aliquip proident Lorem laboris\",\n  \"lastName\": \"commodo proident et esse ullamco\",\n  \"email\": \"proident do veniam\",\n  \"password\": \"ut irure reprehenderit consequat U\",\n  \"phone\": \"enim laboris nisi do\",\n  \"userStatus\": 95919992\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "elit culpa sunt deserunt",
													"description": "(Required) name that need to be updated"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete user",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "elit culpa sunt deserunt",
											"description": "(Required) The name that needs to be deleted"
										}
									]
								},
								"description": "This can only be done by the logged in user."
							},
							"response": [
								{
									"name": "Invalid username supplied",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "elit culpa sunt deserunt",
													"description": "(Required) The name that needs to be deleted"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "User not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "elit culpa sunt deserunt",
													"description": "(Required) The name that needs to be deleted"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Create user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 1,\n  \"username\": \"May\",\n  \"firstName\": \"Mary\",\n  \"lastName\": \"Jay\",\n  \"email\": \"pass@gmail.ng\",\n  \"password\": \"notok\",\n  \"phone\": \"0123456789\",\n  \"userStatus\": 95919991\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user?type=seller",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "type",
									"value": "seller"
								}
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": -27651358,\n  \"username\": \"ea occae\",\n  \"firstName\": \"aliquip proident Lorem laboris\",\n  \"lastName\": \"commodo proident et esse ullamco\",\n  \"email\": \"proident do veniam\",\n  \"password\": \"ut irure reprehenderit consequat U\",\n  \"phone\": \"enim laboris nisi do\",\n  \"userStatus\": 95919992\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Creates list of users with given input array",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"id\": -45489695,\n    \"username\": \"sunt laboris id et dolore\",\n    \"firstName\": \"aute fugiat est reprehenderit aliquip\",\n    \"lastName\": \"culpa labore\",\n    \"email\": \"do tempor est elit eu\",\n    \"password\": \"sit quis\",\n    \"phone\": \"et\",\n    \"userStatus\": -14127279\n  },\n  {\n    \"id\": -48179978,\n    \"username\": \"in do dolore\",\n    \"firstName\": \"ven\",\n    \"lastName\": \"voluptate\",\n    \"email\": \"laborum cupidatat\",\n    \"password\": \"culpa adipisicing ea non elit\",\n    \"phone\": \"voluptate Lorem occaecat id\",\n    \"userStatus\": 40609980\n  }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/createWithArray",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"createWithArray"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/createWithArray",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"createWithArray"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Creates list of users with given input array",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"id\": 39738028,\n    \"username\": \"occaecat Excepteur ullam\",\n    \"firstName\": \"ex adipis\",\n    \"lastName\": \"veniam laboris ut qui deserunt\",\n    \"email\": \"enim nisi incididunt\",\n    \"password\": \"proident ad\",\n    \"phone\": \"elit\",\n    \"userStatus\": -23120611\n  },\n  {\n    \"id\": 43288347,\n    \"username\": \"eu sunt\",\n    \"firstName\": \"commodo occaecat\",\n    \"lastName\": \"nulla non ullamco Lorem culpa\",\n    \"email\": \"eiusmod amet Lorem aliquip ex\",\n    \"password\": \"enim cillum quis pariatur aliqua\",\n    \"phone\": \"laborum est nostrud ea\",\n    \"userStatus\": 85251991\n  }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/createWithList",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"createWithList"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/createWithList",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"createWithList"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Logs user into the system",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/login?username=elit culpa sunt deserunt&password=elit culpa sunt deserunt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "elit culpa sunt deserunt",
									"description": "(Required) The user name for login"
								},
								{
									"key": "password",
									"value": "elit culpa sunt deserunt",
									"description": "(Required) The password for login in clear text"
								}
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=elit culpa sunt deserunt&password=elit culpa sunt deserunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "elit culpa sunt deserunt"
										},
										{
											"key": "password",
											"value": "elit culpa sunt deserunt"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Expires-After",
									"value": "2007-08-21T15:42:11.158Z",
									"description": "date in UTC when token expires"
								},
								{
									"key": "X-Rate-Limit",
									"value": "-92306111",
									"description": "calls per hour allowed by the user"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"elit culpa sunt deserunt\""
						},
						{
							"name": "Invalid username/password supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=elit culpa sunt deserunt&password=elit culpa sunt deserunt",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "elit culpa sunt deserunt"
										},
										{
											"key": "password",
											"value": "elit culpa sunt deserunt"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Logs out current logged in user session",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"logout"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		}
	]
}